Include %occInclude

Class fhirtemplate.Installer
{

Parameter Namespace As String = "FHIRSERVER";

Parameter AppKey As String = "/fhir/r4";

Parameter StrategyClass As String = "HS.FHIRServer.Storage.Json.InteractionsStrategy";

Parameter MetadataConfigKey As String = "HL7v40";

ClassMethod Install(sourceDir As %String)
{
    set vars("Namespace") = ..#Namespace
	set vars("SourceDir") = sourceDir
    set tSc = ..Setup(.vars)
    if $$$ISERR(tSc) {
		do $SYSTEM.Status.DisplayError(tSc)
	}
	set tSc = ..CreateWebUI("/fhirUI", ..#Namespace, sourceDir + "/fhirUI")
    if $$$ISERR(tSc)
	{
		do $SYSTEM.Status.DisplayError(tSc)
	}
    set tSc = ..CreateWebAPI("/fhir/api", ..#Namespace, "diashenrique.fhir.portal.Dispatch")
	if $$$ISERR(tSc)
	{
		do $SYSTEM.Status.DisplayError(tSc)
	}
	set tSc = ..SetupFHIRServer(..#Namespace, ..#AppKey, ..#StrategyClass, ..#MetadataConfigKey, "/data/fhir/")
	if $$$ISERR(tSc)
	{
		do $SYSTEM.Status.DisplayError(tSc)
	}
}

XData Manifest [ XMLNamespace = INSTALLER ]
{
<Manifest>
	<Log Text="Changing system configuration" Level="0"/>
	<SystemSetting Name="Config.config.routines" Value="50" />
	<SystemSetting Name="Config.config.globals8kb" Value="2000" />

	<SystemSetting Name="Config.Startup.SystemMode" Value="DEVELOPMENT" />

	<Log Text="check if namespace ${Namespace} exists, if not create it" Level="0"/>
	<If Condition='(##class(Config.Namespaces).Exists("${Namespace}")=0)'>
		<Log Text="Creating Iris namespace ${Namespace}" Level="0"/>
		<Namespace Name="${Namespace}" Create="yes" Code="${Namespace}" Data="${Namespace}" Ensemble="1">
			<Configuration>
				<Database Name="${Namespace}" Dir="${MGRDIR}${Namespace}" Create="yes" Resource="%DB_${Namespace}"/>
				<ClassMapping Package="HS" From="HSLIB"/>
				<ClassMapping Package="HSMOD" From="HSLIB"/>
			</Configuration>

			<Invoke Class="%ZHSLIB.HealthShareMgr" Method="EnableHealthShareNamespace" CheckStatus="1" >
				<Arg Value="${Namespace}"/>
				<Arg Value="0"/>
				<Arg Value="1"/>
				<Arg Value="1"/>
			</Invoke>
			<Log Text="Importing all code into namespace ${Namespace}" Level="0"/>
			<Import File="${SourceDir}/src" Flags="ck" IgnoreErrors="0" Recurse="1"/>
		</Namespace>
	</If>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod Setup(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
 #; Let our XGL document generate code for this method.
 return ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Manifest")
}

ClassMethod SetupFHIRServer(namespace As %String, appKey As %String, strategyClass As %String, metadataConfigKey As %String, resourcePath As %String) As %Status
{
    #dim tSc As %Status = $$$OK
	set tSc = $$$OK
	try {
        new $NAMESPACE
        set $NAMESPACE = "HSLIB"
        Do ##class(HS.Util.Installer.Foundation).Install(namespace)
        Set $NAMESPACE = namespace

        // Install elements that are required for a FHIR-enabled namespace
        do ##class(HS.FHIRServer.Installer).InstallNamespace()

        // Install an instance of a FHIR Service into the current namespace
        do ##class(HS.FHIRServer.Installer).InstallInstance(appKey, strategyClass, metadataConfigKey)

        Set strategy = ##class(HS.FHIRServer.API.InteractionsStrategy).GetStrategyForEndpoint(appKey)
        Set config = strategy.GetServiceConfigData()
        Set config.DebugMode = 4
        do strategy.SaveServiceConfigData(config)
        // load test data
        set tSc = ##class(HS.FHIRServer.Tools.DataLoader).SubmitResourceFiles(resourcePath, namespace, appKey)
    }
	catch ex {
		set tSc=ex.AsStatus()
	}
	return tSc
}

ClassMethod CreateWebUI(url As %String, namespace As %String, resourcePath As %String)
{
	#dim tSc As %Status = $$$OK
	set tSc = $$$OK
	try {
		new $NAMESPACE
		set $NAMESPACE = "%SYS"

		set properties("ServeFiles") = "2"
		set properties("Recurse") = "1"
		set properties("UseCookies") = "2"
		set properties("MatchRoles") = ":" _ $$$AllRoleName
		set properties("AutheEnabled") = $$$AutheUnauthenticated
		set properties("NameSpace") = namespace
		Set properties("Path") = resourcePath

		if ('##class(Security.Applications).Exists(url)) {
			set tSc = ##class(Security.Applications).Create(url, .properties)
		} else {
			set tSc = ##class(Security.Applications).Modify(url, .properties)
		}
	}
	catch ex {
		set tSc=ex.AsStatus()
	}
	return tSc
}

ClassMethod CreateWebAPI(url As %String, namespace As %String, dispatch As %String) As %Status
{
	#dim tSc As %Status = $$$OK
	set tSc = $$$OK
	try {
		new $NAMESPACE
		set $NAMESPACE = "%SYS"

		set properties("ServeFiles") = "2"
		set properties("Recurse") = "1"
		set properties("UseCookies") = "2"
		set properties("MatchRoles") = ":" _ $$$AllRoleName
		set properties("AutheEnabled") = $$$AutheUnauthenticated
		set properties("NameSpace") = namespace
		set properties("DispatchClass") = dispatch

		if ('##class(Security.Applications).Exists(url)) {
			set tSc = ##class(Security.Applications).Create(url, .properties)
		} else {
			set tSc = ##class(Security.Applications).Modify(url, .properties)
		}
	}
	catch ex {
		set tSc=ex.AsStatus()
	}
	return tSc
}

}
